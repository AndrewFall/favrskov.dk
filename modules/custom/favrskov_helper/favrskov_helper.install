<?php

/**
 * Aimed to collect hook_updates() and other staff.
 */

/**
 * Implements hook_install().
 */
function favrskov_helper_install() {
  array_map('features_revert_module', array(
    'panel_article_page',
    'panel_banner_page',
    'panel_factbox_page',
    'panel_faq_page',
    'panel_job_page',
    'panel_news_page',
    'panel_faq_page',
    'panel_phonebook',
    'panel_self_service_page',
    'panel_slider_page',
    'panel_webform_page',
  ));
}

/**
 * Translations adding and features reverting.
 */
function favrskov_helper_update_7000() {
  t('Vacancies');
  t('Application deadline');
  t('Place of work');
  t('Description');
  t('Apply link');
  t('Start date');

  locale_add_translation('Vacancies', 'da', 'Ledige stillinger');
  locale_add_translation('Application deadline', 'da', 'Ansøgningsfrist');
  locale_add_translation('Place of work', 'da', 'Arbejdssted');
  locale_add_translation('Description', 'da', 'Beskrivelse');
  locale_add_translation('Apply link', 'da', 'Søg stillingen via dette link');
  locale_add_translation('Start date', 'da', 'Ansøgningsfrist');

  locale_clear_cache();

  array_map('features_revert_module', array(
    'views_job',
    'feeds_job_importer',
    'panel_job_page',
  ));
}

/**
 * Domain features enabling.
 */
function favrskov_helper_update_7001() {
  $list = array(
    'config_domain',
    'config_domain_variables',
    'config_domain_alias',
    'config_domain_theme',
  );
  module_enable($list);
}

/**
 * Feature reverting.
 */
function favrskov_helper_update_7002() {
  features_revert(array('config_metatags'));
}

/**
 * View features reverting due to Picture module update.
 */
function favrskov_helper_update_7003() {
  array_map('features_revert_module', array(
    'view_slider',
    'views_banners',
  ));

  // Update of picture formatter that is using in panels.
  $query = db_select('panels_pane', 'pp')
    ->fields('pp', array('pid', 'configuration'))
    ->condition('panel', 'wide_image')
    ->condition('type', 'entity_field')
    ->execute();

  $result = $query->fetchAllKeyed();

  foreach ($result as $pid => $conf) {
    $new_conf = unserialize($conf);
    $picture_group = isset($new_conf['formatter_settings']['picture_group']);
    $picture_mapping = isset($new_conf['formatter_settings']['picture_mapping']);

    if ($picture_group && $picture_mapping) {
      unset($new_conf['formatter_settings']['picture_group']);
    }
    elseif ($picture_group && !$picture_mapping) {
      $new_conf['formatter_settings']['picture_mapping'] = $new_conf['formatter_settings']['picture_group'];
      unset($new_conf['formatter_settings']['picture_group']);
    }

    db_update('panels_pane')
      ->fields(array('configuration' => serialize($new_conf)))
      ->condition('pid', $pid)
      ->execute();
  }
}

/**
 * Change Subject Area term widget, update term filter conditions.
 */
function favrskov_helper_update_7004() {
  module_enable(array('hierarchical_select', 'hs_taxonomy'));

  $vocabulary = taxonomy_vocabulary_machine_name_load('subject_area');

  $term = new stdClass();
  $term->name = 'Favrskov.dk';
  $term->vid = $vocabulary->vid;
  taxonomy_term_save($term);

  $query = db_update('taxonomy_term_hierarchy');
  $query->fields(array('parent' => $term->tid));
  $query->condition('tid', array(1689, 1688, 1701));
  $query->execute();

  array_map('features_revert_module', array(
    'content_type_article',
    'content_type_news',
    'content_type_subjectpage',
    'content_type_webform',
    'fields_shared',
    'view_blogs',
  ));
}

/**
 * Feature revert. URL-alias correction. Redirects addition.
 */
function favrskov_helper_update_7005() {
  features_revert(array('config_url_aliases'));

  $wrong_alias_begin = 'favrskovdk-';

  $pid_alias = db_select('url_alias', 'ua')
    ->fields('ua', array('pid', 'alias'))
    ->condition('alias', "$wrong_alias_begin%", 'LIKE')
    ->execute()
    ->fetchAllKeyed();

  foreach($pid_alias as $pid => $alias) {
    $right_alias = str_replace($wrong_alias_begin, '', $alias);

    db_update('url_alias')
      ->fields(array('alias' => $right_alias))
      ->condition('pid', $pid)
      ->execute();

    $redirect = new stdClass();
    redirect_object_prepare(
      $redirect,
      array(
        'source' => $alias,
        'source_options' => array(),
        'redirect' => $right_alias,
        'redirect_options' => array(),
        'language' => 'da',
      )
    );

    redirect_save($redirect);
  }
}
