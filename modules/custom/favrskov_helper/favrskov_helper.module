<?php

/**
 * @file
 * Main file of favrskov_helper.module
 */

/**
 * Helper to manually add a single translation string.
 *
 * After adding strings use locale_clear_cache() for clearing caches.
 */
function locale_add_translation($source, $langcode, $translation, $context = '', $textgroup = 'default') {
  $report = &drupal_static(__FUNCTION__, array(
    'additions' => 0,
    'updates' => 0,
    'deletes' => 0,
    'skips' => 0,
  ));

  require_once DRUPAL_ROOT . '/includes/locale.inc';

  _locale_import_one_string_db($report, $langcode, $context, $source, $translation, $textgroup, 'Manual import via helper ' . __FUNCTION__ . '().', LOCALE_IMPORT_OVERWRITE);
}

/**
 * Helper to clear the locale cache.
 */
function locale_clear_cache() {
  require_once DRUPAL_ROOT . '/includes/locale.inc';

  // Clear locale cache.
  _locale_invalidate_js();
  cache_clear_all('locale:', 'cache', TRUE);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function favrskov_helper_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'feeds_tamper' && $plugin_type == 'plugins') {
    return 'feeds_tamper_plugins/';
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function favrskov_helper_ctools_plugin_api($owner, $api) {
  if ($owner == 'metatag' && $api == 'metatag') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 *
 * @see favrskov_helper_tokens().
 */
function favrskov_helper_pathauto_alias_alter(&$alias, &$context) {
  // We use custom separator due to common slash is trimmed
  // due to token_replace() call.
  $alias = str_replace('favrskovtokensseparator', '/', $alias);
}

/**
 * Implements hook_permission().
 */
function favrskov_helper_permission() {
  return array(
    'administer job importer search' => array(
      'title' => t('Administer Job importer search'),
    ),
  );
}

/**
 * Implements hook_admin_menu_output_alter().
 *
 * Restrict access to irrelevant domain menus and common menus on current
 * domains. Each domain menu should be visible on its own domain only.
 */
function favrskov_helper_admin_menu_output_alter(&$content) {
  $role = user_role_load_by_name('Editor');

  if ($role && user_has_role($role->rid)) {
    $info = _favrskov_helper_get_menu_and_domain_info();

    if (module_exists('domain')) {
      foreach ($info['all_domains_info'] as $domain_id => $domain_settings) {
        $single_domain_setting = unserialize($domain_settings);
        $menu_name = $single_domain_setting['menu_main_links_source'];

        if ($domain_id != $info['current_domain_info']['domain_id']) {
          unset($content['menu']['admin/structure']['admin/structure/menu']["admin/structure/menu/manage/$menu_name"]);
        }

        // Remove from list domain-related menu names.
        unset($info['custom_menu_names'][$menu_name]);
      }
    }

    foreach ($info['custom_menu_names'] as $menu_name => $title) {
      unset($content['menu']['admin/structure']['admin/structure/menu']["admin/structure/menu/manage/$menu_name"]);
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 *
 * Hide table rows with menus that Editor should not see.
 * Applied to table that displays on 'admin/structure/menu' page only.
 */
function favrskov_helper_preprocess_table(&$variables) {
  if (current_path() == 'admin/structure/menu') {
    $role = user_role_load_by_name('Editor');

    if ($role && user_has_role($role->rid)) {
      $info = _favrskov_helper_get_menu_and_domain_info();

      if (module_exists('domain')) {
        foreach ($info['all_domains_info'] as $domain_id => $domain_settings) {
          $single_domain_setting = unserialize($domain_settings);
          $menu_name = $single_domain_setting['menu_main_links_source'];

          if ($domain_id != $info['current_domain_info']['domain_id']) {
            foreach ($variables['rows'] as $index => $row) {
              if (strpos($row[0], $info['custom_menu_names'][$menu_name]) !== FALSE) {
                unset($variables['rows'][$index]);
              }
            }
          }

          // Remove from list domain-related menu names.
          unset($info['custom_menu_names'][$menu_name]);
        }
      }

      foreach ($info['custom_menu_names'] as $title) {
        foreach ($variables['rows'] as $index => $row) {
          if (strpos($row[0], $title) !== FALSE) {
            unset($variables['rows'][$index]);
          }
        }
      }
    }
  }
}

/**
 * Helper function.
 *
 * @see favrskov_helper_preprocess_table().
 * @see favrskov_helper_admin_menu_output_alter().
 */
function _favrskov_helper_get_menu_and_domain_info() {
  $custom_menu_names = db_select('menu_custom', 'mc')
    ->fields('mc', array('menu_name', 'title'))
    ->execute()
    ->fetchAllKeyed();

  $info = array(
    'custom_menu_names' => $custom_menu_names,
  );

  if (module_exists('domain')) {
    $current_domain_info = domain_get_domain();
    $all_domains_info = db_select('domain_conf', 'dc')
      ->fields('dc')
      ->execute()
      ->fetchAllKeyed();

    $domain_dependent = array(
      'current_domain_info' => $current_domain_info,
      'all_domains_info' => $all_domains_info,
    );
  }

  return empty($domain_dependent) ? $info : $info + $domain_dependent;
}

/**
 * Implements hook_views_api().
 */
function favrskov_helper_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'favrskov_helper') . '/views',
  );
}
