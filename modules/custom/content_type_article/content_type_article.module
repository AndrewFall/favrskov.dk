<?php
/**
 * @file
 * Code for the Content Type Article feature.
 *
 * Article is a content type with comments feature. Contains a lot of node and taxonomy references
 * and a publication field collection.
 */

include_once 'content_type_article.features.inc';


/**
 * Implements hook_field_collection_is_empty_alter().
 *
 * We have an 'Open in new window' option in the publication field collection which is selected by default.
 * So we must inform 'field collection' module that field collection instance with all empty fields except that option
 * is an empty field collection instance to disable validation errors.
 */
function content_type_article_field_collection_is_empty_alter(&$is_empty, $item) {
  if ($item->field_name == 'field_publications') {
    $instances = field_info_instances('field_collection_item', $item->field_name);
    $is_empty = TRUE;
    foreach ($instances as $instance) {
      $field_name = $instance['field_name'];
      if ($field_name != 'field_open_in_new_window') {
        $field = field_info_field($field_name);
        // Determine the list of languages to iterate on.
        $languages = field_available_languages('field_collection_item', $field);

        foreach ($languages as $langcode) {
          if (!empty($item->{$field_name}[$langcode])) {
            // If at least one collection-field is not empty; the
            // field collection item is not empty.
            foreach ($item->{$field_name}[$langcode] as $field_item) {
              if (!module_invoke($field['module'], 'field_is_empty', $field_item, $field)) {
                $is_empty = FALSE;
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess field().
 *
 * Changes 'publications' field collection output.
 */
function content_type_article_preprocess_field(&$variables, $hook) {
  if ($variables['element']['#field_name'] == 'field_publications') {
    foreach ($variables['items'] as &$item) {
      foreach ($item['entity']['field_collection_item'] as &$field_collection_item) {
        $item['link'] = '';

        if (!empty($field_collection_item['field_pdf_file'])) {
          $item['link'] = $field_collection_item['field_pdf_file'];
          $item['link']['#items'][0]['attributes'] = array();
        }
        else {
          if (!empty($field_collection_item['field_link'])) {
            $item['link'] = $field_collection_item['field_link'];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function content_type_article_form_article_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_update_category']['#states'] = array(
    'required' => array(
      '#edit-field-send-update-und' => array('checked' => TRUE),
    ),
  );
}

/**
 * Implements hook_workbench_moderation_states_next_alter().
 */
function content_type_article_workbench_moderation_states_next_alter(&$states, $current_state, $context) {
  krumo($states);
  //krumo($current_states);
  //krumo($context['node']->workbench_moderation['current']);
  //krumo($context['node']->workbench_moderation['my_revision']);
  //krumo($context['node']->workbench_moderation['published']);
  krumo($context);
  if ($context['node']->workbench_moderation['current']->published == 1) {
    $context['node']->workbench_moderation['current']->from_state = 'published';
  }

  if ($context['node']->workbench_moderation['my_revision']->published == 1) {
    $context['node']->workbench_moderation['my_revision']->from_state = 'published';
  }

  if ($context['node']->workbench_moderation['published']->published == 1) {
    $context['node']->workbench_moderation['published']->from_state = 'published';
  }
  //unset($states['needs_review']);

  //krumo($context['node']->workbench_moderation['current']);
  //krumo($context['node']->workbench_moderation['my_revision']);
  //krumo($context['node']->workbench_moderation['published']);

}