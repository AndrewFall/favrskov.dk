<?php

/**
 * @file Domain extension module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Additional fields to domain_content_admin form constructor function.
 * @see domain_content_form().
 */
function domain_extention_form_domain_content_admin_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Get filtered count of nodes that were selected by user before.
  $filtered_count = variable_get("domain_extention_filtered_count_$user->uid", 0);

  // In case filters haven`t been used yet - set $filtered_count
  // to count of all nodes.
  if (empty($filtered_count)) {
    $filtered_count = _domain_extention_get_filtered_count();
  }

  $form['filtered_count'] = array(
    '#type' => 'textfield',
    '#default_value' => $filtered_count,
    '#weight' => -50,
    '#attributes' => array(
      'id' => array('filtered-count')
    ),
  );

  $form['#attached']['css'][] = drupal_get_path('module', 'domain_extention') . '/css/domain_extention.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'domain_extention') . '/js/domain_extention.js';
  $form['#attached']['js'][] = array(
    'data' => array(
      'domainExtention' =>
        array(
          'filteredCount' => $filtered_count,
        )
      ),
    'type' => 'setting',
  );

  $form['#submit'][] = 'domain_extention_filter_form_submit';

  $old_submit_handler = array_search('node_admin_nodes_submit', $form['admin']['options']['submit']['#submit']);

  $form['admin']['options']['submit']['#submit'][$old_submit_handler] = 'domain_extention_filter_form_submit';
}

/**
 * Form submit handler for node_filter_form() applicable to
 * domain content pages only.
 */
function domain_extention_filter_form_submit($form, &$form_state) {
  global $user;

  $filtered_count = _domain_extention_get_filtered_count();

  // Set filtered count value to variable separately for each logged in user
  // to reuse in domain_extention_form_domain_content_admin_alter().
  variable_set("domain_extention_filtered_count_$user->uid", $filtered_count);
}

/**
 * Get count of filtered content.
 *
 * If filters are empty return count of all nodes.
 */
function _domain_extention_get_filtered_count() {
  $query = db_select('node', 'n');
  node_build_filter_query($query);
  $filtered_count = $query->countQuery()->execute()->fetchCol();

  return $filtered_count[0];
}

/**
 * Overrides node_admin_nodes_submit() handler to extend filter capabilities
 * with behavior similar to VBO filters.
 */
function domain_extention_admin_nodes_submit($form, &$form_state) {
  $operations = module_invoke_all('node_operations');
  $operation = $operations[$form_state['values']['operation']];
  // Filter out unchecked nodes
  $nodes = array_filter($form_state['values']['nodes']);
  if ($function = $operation['callback']) {
    // Add in callback arguments if present.
    if (isset($operation['callback arguments'])) {
      $args = array_merge(array($nodes), $operation['callback arguments']);
    }
    else {
      $args = array($nodes);
    }
    call_user_func_array($function, $args);

    cache_clear_all();
  }
  else {
    // We need to rebuild the form to go to a second step. For example, to
    // show the confirmation form for the deletion of nodes.
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Implements hook_user_logout().
 */
function domain_extention_user_logout($account) {
  variable_del("domain_extention_filtered_count_$account->uid");
}

/**
 * Implements hook_js_alter().
 */
function domain_extention_js_alter(&$javascript) {
  // Restrict usage of tableselect.js on admin/domain/content/* pages.
  if (strpos(current_path(), 'admin/domain/content/') !== FALSE) {
    unset($javascript['misc/tableselect.js']);
  }
}
